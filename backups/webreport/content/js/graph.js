/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 78735.0, "series": [{"data": [[0.0, 5.0], [0.1, 9.0], [0.2, 10.0], [0.3, 11.0], [0.4, 12.0], [0.5, 13.0], [0.6, 14.0], [0.7, 15.0], [0.8, 16.0], [0.9, 17.0], [1.0, 18.0], [1.1, 18.0], [1.2, 19.0], [1.3, 19.0], [1.4, 20.0], [1.5, 21.0], [1.6, 21.0], [1.7, 22.0], [1.8, 22.0], [1.9, 23.0], [2.0, 23.0], [2.1, 24.0], [2.2, 24.0], [2.3, 25.0], [2.4, 25.0], [2.5, 26.0], [2.6, 27.0], [2.7, 28.0], [2.8, 28.0], [2.9, 29.0], [3.0, 29.0], [3.1, 30.0], [3.2, 30.0], [3.3, 31.0], [3.4, 31.0], [3.5, 32.0], [3.6, 32.0], [3.7, 33.0], [3.8, 34.0], [3.9, 34.0], [4.0, 35.0], [4.1, 35.0], [4.2, 36.0], [4.3, 36.0], [4.4, 37.0], [4.5, 37.0], [4.6, 37.0], [4.7, 38.0], [4.8, 38.0], [4.9, 38.0], [5.0, 39.0], [5.1, 39.0], [5.2, 40.0], [5.3, 40.0], [5.4, 41.0], [5.5, 41.0], [5.6, 41.0], [5.7, 42.0], [5.8, 42.0], [5.9, 42.0], [6.0, 43.0], [6.1, 43.0], [6.2, 44.0], [6.3, 44.0], [6.4, 44.0], [6.5, 45.0], [6.6, 45.0], [6.7, 45.0], [6.8, 46.0], [6.9, 46.0], [7.0, 46.0], [7.1, 47.0], [7.2, 47.0], [7.3, 47.0], [7.4, 48.0], [7.5, 49.0], [7.6, 49.0], [7.7, 50.0], [7.8, 50.0], [7.9, 51.0], [8.0, 51.0], [8.1, 52.0], [8.2, 52.0], [8.3, 53.0], [8.4, 53.0], [8.5, 54.0], [8.6, 54.0], [8.7, 54.0], [8.8, 55.0], [8.9, 55.0], [9.0, 55.0], [9.1, 56.0], [9.2, 57.0], [9.3, 57.0], [9.4, 57.0], [9.5, 58.0], [9.6, 58.0], [9.7, 58.0], [9.8, 59.0], [9.9, 60.0], [10.0, 60.0], [10.1, 60.0], [10.2, 61.0], [10.3, 61.0], [10.4, 62.0], [10.5, 62.0], [10.6, 63.0], [10.7, 63.0], [10.8, 64.0], [10.9, 64.0], [11.0, 65.0], [11.1, 66.0], [11.2, 66.0], [11.3, 67.0], [11.4, 67.0], [11.5, 67.0], [11.6, 68.0], [11.7, 68.0], [11.8, 69.0], [11.9, 69.0], [12.0, 70.0], [12.1, 70.0], [12.2, 70.0], [12.3, 71.0], [12.4, 72.0], [12.5, 73.0], [12.6, 73.0], [12.7, 74.0], [12.8, 75.0], [12.9, 75.0], [13.0, 76.0], [13.1, 77.0], [13.2, 77.0], [13.3, 78.0], [13.4, 79.0], [13.5, 79.0], [13.6, 80.0], [13.7, 80.0], [13.8, 81.0], [13.9, 82.0], [14.0, 83.0], [14.1, 84.0], [14.2, 85.0], [14.3, 85.0], [14.4, 86.0], [14.5, 87.0], [14.6, 88.0], [14.7, 90.0], [14.8, 91.0], [14.9, 93.0], [15.0, 94.0], [15.1, 95.0], [15.2, 96.0], [15.3, 97.0], [15.4, 97.0], [15.5, 98.0], [15.6, 99.0], [15.7, 99.0], [15.8, 100.0], [15.9, 101.0], [16.0, 102.0], [16.1, 103.0], [16.2, 105.0], [16.3, 108.0], [16.4, 110.0], [16.5, 113.0], [16.6, 115.0], [16.7, 117.0], [16.8, 118.0], [16.9, 120.0], [17.0, 121.0], [17.1, 123.0], [17.2, 124.0], [17.3, 125.0], [17.4, 127.0], [17.5, 128.0], [17.6, 129.0], [17.7, 131.0], [17.8, 132.0], [17.9, 133.0], [18.0, 134.0], [18.1, 135.0], [18.2, 136.0], [18.3, 137.0], [18.4, 137.0], [18.5, 138.0], [18.6, 139.0], [18.7, 139.0], [18.8, 140.0], [18.9, 140.0], [19.0, 141.0], [19.1, 141.0], [19.2, 142.0], [19.3, 143.0], [19.4, 143.0], [19.5, 144.0], [19.6, 144.0], [19.7, 145.0], [19.8, 145.0], [19.9, 146.0], [20.0, 147.0], [20.1, 147.0], [20.2, 148.0], [20.3, 148.0], [20.4, 149.0], [20.5, 150.0], [20.6, 151.0], [20.7, 152.0], [20.8, 153.0], [20.9, 154.0], [21.0, 154.0], [21.1, 155.0], [21.2, 156.0], [21.3, 157.0], [21.4, 158.0], [21.5, 158.0], [21.6, 159.0], [21.7, 160.0], [21.8, 161.0], [21.9, 162.0], [22.0, 163.0], [22.1, 164.0], [22.2, 165.0], [22.3, 166.0], [22.4, 167.0], [22.5, 168.0], [22.6, 168.0], [22.7, 170.0], [22.8, 171.0], [22.9, 172.0], [23.0, 172.0], [23.1, 174.0], [23.2, 175.0], [23.3, 176.0], [23.4, 177.0], [23.5, 178.0], [23.6, 179.0], [23.7, 180.0], [23.8, 181.0], [23.9, 182.0], [24.0, 183.0], [24.1, 184.0], [24.2, 184.0], [24.3, 185.0], [24.4, 186.0], [24.5, 187.0], [24.6, 188.0], [24.7, 188.0], [24.8, 189.0], [24.9, 190.0], [25.0, 191.0], [25.1, 192.0], [25.2, 193.0], [25.3, 194.0], [25.4, 195.0], [25.5, 196.0], [25.6, 196.0], [25.7, 197.0], [25.8, 198.0], [25.9, 199.0], [26.0, 200.0], [26.1, 201.0], [26.2, 202.0], [26.3, 202.0], [26.4, 203.0], [26.5, 205.0], [26.6, 205.0], [26.7, 206.0], [26.8, 209.0], [26.9, 210.0], [27.0, 211.0], [27.1, 211.0], [27.2, 212.0], [27.3, 213.0], [27.4, 214.0], [27.5, 215.0], [27.6, 216.0], [27.7, 217.0], [27.8, 219.0], [27.9, 221.0], [28.0, 222.0], [28.1, 224.0], [28.2, 224.0], [28.3, 226.0], [28.4, 226.0], [28.5, 227.0], [28.6, 229.0], [28.7, 229.0], [28.8, 231.0], [28.9, 232.0], [29.0, 233.0], [29.1, 234.0], [29.2, 235.0], [29.3, 237.0], [29.4, 238.0], [29.5, 240.0], [29.6, 241.0], [29.7, 242.0], [29.8, 243.0], [29.9, 244.0], [30.0, 245.0], [30.1, 246.0], [30.2, 247.0], [30.3, 249.0], [30.4, 250.0], [30.5, 251.0], [30.6, 252.0], [30.7, 253.0], [30.8, 255.0], [30.9, 256.0], [31.0, 257.0], [31.1, 259.0], [31.2, 260.0], [31.3, 261.0], [31.4, 263.0], [31.5, 265.0], [31.6, 266.0], [31.7, 267.0], [31.8, 269.0], [31.9, 270.0], [32.0, 272.0], [32.1, 275.0], [32.2, 279.0], [32.3, 281.0], [32.4, 284.0], [32.5, 287.0], [32.6, 289.0], [32.7, 292.0], [32.8, 295.0], [32.9, 297.0], [33.0, 301.0], [33.1, 308.0], [33.2, 311.0], [33.3, 317.0], [33.4, 320.0], [33.5, 326.0], [33.6, 333.0], [33.7, 342.0], [33.8, 347.0], [33.9, 352.0], [34.0, 358.0], [34.1, 366.0], [34.2, 371.0], [34.3, 379.0], [34.4, 381.0], [34.5, 384.0], [34.6, 387.0], [34.7, 392.0], [34.8, 396.0], [34.9, 399.0], [35.0, 402.0], [35.1, 406.0], [35.2, 411.0], [35.3, 413.0], [35.4, 419.0], [35.5, 422.0], [35.6, 424.0], [35.7, 426.0], [35.8, 428.0], [35.9, 433.0], [36.0, 436.0], [36.1, 438.0], [36.2, 441.0], [36.3, 444.0], [36.4, 449.0], [36.5, 454.0], [36.6, 458.0], [36.7, 461.0], [36.8, 464.0], [36.9, 469.0], [37.0, 472.0], [37.1, 476.0], [37.2, 477.0], [37.3, 480.0], [37.4, 481.0], [37.5, 482.0], [37.6, 484.0], [37.7, 485.0], [37.8, 486.0], [37.9, 488.0], [38.0, 489.0], [38.1, 489.0], [38.2, 490.0], [38.3, 491.0], [38.4, 492.0], [38.5, 494.0], [38.6, 496.0], [38.7, 497.0], [38.8, 498.0], [38.9, 500.0], [39.0, 503.0], [39.1, 505.0], [39.2, 510.0], [39.3, 513.0], [39.4, 515.0], [39.5, 518.0], [39.6, 520.0], [39.7, 523.0], [39.8, 527.0], [39.9, 530.0], [40.0, 534.0], [40.1, 538.0], [40.2, 540.0], [40.3, 545.0], [40.4, 547.0], [40.5, 549.0], [40.6, 551.0], [40.7, 553.0], [40.8, 555.0], [40.9, 557.0], [41.0, 558.0], [41.1, 559.0], [41.2, 561.0], [41.3, 562.0], [41.4, 564.0], [41.5, 565.0], [41.6, 566.0], [41.7, 567.0], [41.8, 569.0], [41.9, 570.0], [42.0, 571.0], [42.1, 572.0], [42.2, 574.0], [42.3, 576.0], [42.4, 579.0], [42.5, 579.0], [42.6, 583.0], [42.7, 585.0], [42.8, 588.0], [42.9, 589.0], [43.0, 591.0], [43.1, 593.0], [43.2, 594.0], [43.3, 598.0], [43.4, 599.0], [43.5, 602.0], [43.6, 605.0], [43.7, 616.0], [43.8, 623.0], [43.9, 630.0], [44.0, 634.0], [44.1, 639.0], [44.2, 643.0], [44.3, 646.0], [44.4, 648.0], [44.5, 649.0], [44.6, 652.0], [44.7, 654.0], [44.8, 657.0], [44.9, 660.0], [45.0, 663.0], [45.1, 664.0], [45.2, 667.0], [45.3, 670.0], [45.4, 672.0], [45.5, 677.0], [45.6, 681.0], [45.7, 683.0], [45.8, 685.0], [45.9, 687.0], [46.0, 689.0], [46.1, 691.0], [46.2, 693.0], [46.3, 695.0], [46.4, 699.0], [46.5, 701.0], [46.6, 705.0], [46.7, 709.0], [46.8, 714.0], [46.9, 725.0], [47.0, 728.0], [47.1, 733.0], [47.2, 736.0], [47.3, 739.0], [47.4, 746.0], [47.5, 756.0], [47.6, 762.0], [47.7, 767.0], [47.8, 774.0], [47.9, 783.0], [48.0, 801.0], [48.1, 810.0], [48.2, 819.0], [48.3, 831.0], [48.4, 835.0], [48.5, 838.0], [48.6, 844.0], [48.7, 852.0], [48.8, 859.0], [48.9, 866.0], [49.0, 871.0], [49.1, 873.0], [49.2, 875.0], [49.3, 877.0], [49.4, 881.0], [49.5, 885.0], [49.6, 895.0], [49.7, 898.0], [49.8, 902.0], [49.9, 907.0], [50.0, 911.0], [50.1, 913.0], [50.2, 914.0], [50.3, 916.0], [50.4, 922.0], [50.5, 925.0], [50.6, 927.0], [50.7, 928.0], [50.8, 936.0], [50.9, 951.0], [51.0, 965.0], [51.1, 999.0], [51.2, 1014.0], [51.3, 1024.0], [51.4, 1027.0], [51.5, 1038.0], [51.6, 1043.0], [51.7, 1048.0], [51.8, 1073.0], [51.9, 1075.0], [52.0, 1077.0], [52.1, 1095.0], [52.2, 1114.0], [52.3, 1118.0], [52.4, 1129.0], [52.5, 1147.0], [52.6, 1164.0], [52.7, 1165.0], [52.8, 1178.0], [52.9, 1184.0], [53.0, 1186.0], [53.1, 1188.0], [53.2, 1192.0], [53.3, 1197.0], [53.4, 1206.0], [53.5, 1210.0], [53.6, 1222.0], [53.7, 1231.0], [53.8, 1242.0], [53.9, 1250.0], [54.0, 1265.0], [54.1, 1291.0], [54.2, 1308.0], [54.3, 1309.0], [54.4, 1313.0], [54.5, 1321.0], [54.6, 1324.0], [54.7, 1338.0], [54.8, 1344.0], [54.9, 1362.0], [55.0, 1379.0], [55.1, 1419.0], [55.2, 1463.0], [55.3, 1473.0], [55.4, 1499.0], [55.5, 1513.0], [55.6, 1540.0], [55.7, 1550.0], [55.8, 1576.0], [55.9, 1618.0], [56.0, 1644.0], [56.1, 1679.0], [56.2, 1732.0], [56.3, 1762.0], [56.4, 1793.0], [56.5, 1805.0], [56.6, 1836.0], [56.7, 1866.0], [56.8, 1879.0], [56.9, 1882.0], [57.0, 1890.0], [57.1, 1935.0], [57.2, 1971.0], [57.3, 1993.0], [57.4, 2002.0], [57.5, 2013.0], [57.6, 2021.0], [57.7, 2042.0], [57.8, 2068.0], [57.9, 2084.0], [58.0, 2096.0], [58.1, 2113.0], [58.2, 2143.0], [58.3, 2151.0], [58.4, 2162.0], [58.5, 2179.0], [58.6, 2193.0], [58.7, 2208.0], [58.8, 2221.0], [58.9, 2232.0], [59.0, 2236.0], [59.1, 2243.0], [59.2, 2253.0], [59.3, 2255.0], [59.4, 2258.0], [59.5, 2261.0], [59.6, 2266.0], [59.7, 2271.0], [59.8, 2272.0], [59.9, 2276.0], [60.0, 2282.0], [60.1, 2294.0], [60.2, 2301.0], [60.3, 2311.0], [60.4, 2330.0], [60.5, 2337.0], [60.6, 2345.0], [60.7, 2352.0], [60.8, 2357.0], [60.9, 2374.0], [61.0, 2390.0], [61.1, 2399.0], [61.2, 2405.0], [61.3, 2411.0], [61.4, 2415.0], [61.5, 2420.0], [61.6, 2428.0], [61.7, 2432.0], [61.8, 2444.0], [61.9, 2451.0], [62.0, 2458.0], [62.1, 2466.0], [62.2, 2473.0], [62.3, 2480.0], [62.4, 2484.0], [62.5, 2508.0], [62.6, 2514.0], [62.7, 2528.0], [62.8, 2553.0], [62.9, 2566.0], [63.0, 2583.0], [63.1, 2594.0], [63.2, 2639.0], [63.3, 2655.0], [63.4, 2669.0], [63.5, 2684.0], [63.6, 2689.0], [63.7, 2699.0], [63.8, 2710.0], [63.9, 2721.0], [64.0, 2738.0], [64.1, 2756.0], [64.2, 2767.0], [64.3, 2776.0], [64.4, 2780.0], [64.5, 2790.0], [64.6, 2801.0], [64.7, 2810.0], [64.8, 2815.0], [64.9, 2829.0], [65.0, 2843.0], [65.1, 2854.0], [65.2, 2870.0], [65.3, 2888.0], [65.4, 2921.0], [65.5, 2972.0], [65.6, 2987.0], [65.7, 3020.0], [65.8, 3039.0], [65.9, 3078.0], [66.0, 3117.0], [66.1, 3133.0], [66.2, 3137.0], [66.3, 3160.0], [66.4, 3197.0], [66.5, 3242.0], [66.6, 3291.0], [66.7, 3327.0], [66.8, 3364.0], [66.9, 3397.0], [67.0, 3441.0], [67.1, 3461.0], [67.2, 3469.0], [67.3, 3476.0], [67.4, 3502.0], [67.5, 3537.0], [67.6, 3562.0], [67.7, 3585.0], [67.8, 3609.0], [67.9, 3641.0], [68.0, 3682.0], [68.1, 3711.0], [68.2, 3730.0], [68.3, 3755.0], [68.4, 3775.0], [68.5, 3810.0], [68.6, 3828.0], [68.7, 3875.0], [68.8, 3925.0], [68.9, 3959.0], [69.0, 3998.0], [69.1, 4028.0], [69.2, 4053.0], [69.3, 4086.0], [69.4, 4109.0], [69.5, 4148.0], [69.6, 4186.0], [69.7, 4198.0], [69.8, 4220.0], [69.9, 4230.0], [70.0, 4244.0], [70.1, 4277.0], [70.2, 4362.0], [70.3, 4391.0], [70.4, 4412.0], [70.5, 4433.0], [70.6, 4454.0], [70.7, 4479.0], [70.8, 4497.0], [70.9, 4519.0], [71.0, 4544.0], [71.1, 4553.0], [71.2, 4562.0], [71.3, 4590.0], [71.4, 4599.0], [71.5, 4630.0], [71.6, 4679.0], [71.7, 4702.0], [71.8, 4712.0], [71.9, 4744.0], [72.0, 4772.0], [72.1, 4799.0], [72.2, 4816.0], [72.3, 4831.0], [72.4, 4845.0], [72.5, 4872.0], [72.6, 4880.0], [72.7, 4891.0], [72.8, 4908.0], [72.9, 4928.0], [73.0, 4940.0], [73.1, 4956.0], [73.2, 4969.0], [73.3, 4991.0], [73.4, 5014.0], [73.5, 5033.0], [73.6, 5045.0], [73.7, 5062.0], [73.8, 5075.0], [73.9, 5098.0], [74.0, 5110.0], [74.1, 5120.0], [74.2, 5136.0], [74.3, 5150.0], [74.4, 5165.0], [74.5, 5174.0], [74.6, 5188.0], [74.7, 5199.0], [74.8, 5212.0], [74.9, 5219.0], [75.0, 5229.0], [75.1, 5245.0], [75.2, 5258.0], [75.3, 5269.0], [75.4, 5296.0], [75.5, 5305.0], [75.6, 5322.0], [75.7, 5338.0], [75.8, 5360.0], [75.9, 5395.0], [76.0, 5431.0], [76.1, 5452.0], [76.2, 5481.0], [76.3, 5505.0], [76.4, 5554.0], [76.5, 5600.0], [76.6, 5619.0], [76.7, 5649.0], [76.8, 5671.0], [76.9, 5684.0], [77.0, 5702.0], [77.1, 5738.0], [77.2, 5758.0], [77.3, 5764.0], [77.4, 5780.0], [77.5, 5794.0], [77.6, 5820.0], [77.7, 5833.0], [77.8, 5844.0], [77.9, 5877.0], [78.0, 5887.0], [78.1, 5906.0], [78.2, 5912.0], [78.3, 5927.0], [78.4, 5948.0], [78.5, 5971.0], [78.6, 5992.0], [78.7, 6043.0], [78.8, 6074.0], [78.9, 6112.0], [79.0, 6136.0], [79.1, 6144.0], [79.2, 6158.0], [79.3, 6169.0], [79.4, 6196.0], [79.5, 6230.0], [79.6, 6250.0], [79.7, 6277.0], [79.8, 6311.0], [79.9, 6352.0], [80.0, 6377.0], [80.1, 6404.0], [80.2, 6416.0], [80.3, 6434.0], [80.4, 6456.0], [80.5, 6465.0], [80.6, 6504.0], [80.7, 6535.0], [80.8, 6552.0], [80.9, 6571.0], [81.0, 6605.0], [81.1, 6645.0], [81.2, 6667.0], [81.3, 6686.0], [81.4, 6712.0], [81.5, 6757.0], [81.6, 6789.0], [81.7, 6817.0], [81.8, 6844.0], [81.9, 6875.0], [82.0, 6910.0], [82.1, 6953.0], [82.2, 6972.0], [82.3, 7002.0], [82.4, 7022.0], [82.5, 7057.0], [82.6, 7084.0], [82.7, 7153.0], [82.8, 7181.0], [82.9, 7210.0], [83.0, 7249.0], [83.1, 7294.0], [83.2, 7334.0], [83.3, 7394.0], [83.4, 7431.0], [83.5, 7543.0], [83.6, 7566.0], [83.7, 7623.0], [83.8, 7702.0], [83.9, 7789.0], [84.0, 7852.0], [84.1, 7940.0], [84.2, 7990.0], [84.3, 8077.0], [84.4, 8139.0], [84.5, 8235.0], [84.6, 8362.0], [84.7, 8410.0], [84.8, 8459.0], [84.9, 8569.0], [85.0, 8784.0], [85.1, 8975.0], [85.2, 9143.0], [85.3, 9231.0], [85.4, 9337.0], [85.5, 9481.0], [85.6, 9573.0], [85.7, 9672.0], [85.8, 9729.0], [85.9, 9862.0], [86.0, 9986.0], [86.1, 10012.0], [86.2, 10365.0], [86.3, 10521.0], [86.4, 10659.0], [86.5, 10786.0], [86.6, 10943.0], [86.7, 11205.0], [86.8, 11272.0], [86.9, 11351.0], [87.0, 11399.0], [87.1, 11453.0], [87.2, 11492.0], [87.3, 11538.0], [87.4, 11585.0], [87.5, 11624.0], [87.6, 11669.0], [87.7, 11698.0], [87.8, 11744.0], [87.9, 11768.0], [88.0, 11803.0], [88.1, 11859.0], [88.2, 11889.0], [88.3, 11928.0], [88.4, 11964.0], [88.5, 11992.0], [88.6, 12037.0], [88.7, 12063.0], [88.8, 12138.0], [88.9, 12229.0], [89.0, 12295.0], [89.1, 12605.0], [89.2, 12889.0], [89.3, 13437.0], [89.4, 14275.0], [89.5, 14870.0], [89.6, 15114.0], [89.7, 15486.0], [89.8, 16229.0], [89.9, 16564.0], [90.0, 16822.0], [90.1, 16872.0], [90.2, 17193.0], [90.3, 17363.0], [90.4, 17652.0], [90.5, 17995.0], [90.6, 18416.0], [90.7, 18714.0], [90.8, 18956.0], [90.9, 19300.0], [91.0, 19699.0], [91.1, 20066.0], [91.2, 20319.0], [91.3, 20592.0], [91.4, 20841.0], [91.5, 21006.0], [91.6, 21625.0], [91.7, 21937.0], [91.8, 22161.0], [91.9, 22495.0], [92.0, 23108.0], [92.1, 23389.0], [92.2, 23716.0], [92.3, 24117.0], [92.4, 24324.0], [92.5, 24758.0], [92.6, 24940.0], [92.7, 25261.0], [92.8, 25748.0], [92.9, 26340.0], [93.0, 27368.0], [93.1, 27848.0], [93.2, 28946.0], [93.3, 29164.0], [93.4, 29313.0], [93.5, 29464.0], [93.6, 29571.0], [93.7, 29773.0], [93.8, 30004.0], [93.9, 30004.0], [94.0, 30004.0], [94.1, 30004.0], [94.2, 30005.0], [94.3, 30005.0], [94.4, 30005.0], [94.5, 30005.0], [94.6, 30005.0], [94.7, 30005.0], [94.8, 30005.0], [94.9, 30005.0], [95.0, 30005.0], [95.1, 30006.0], [95.2, 30006.0], [95.3, 30006.0], [95.4, 30006.0], [95.5, 30007.0], [95.6, 30008.0], [95.7, 30009.0], [95.8, 30010.0], [95.9, 30010.0], [96.0, 30013.0], [96.1, 30014.0], [96.2, 30017.0], [96.3, 30023.0], [96.4, 30034.0], [96.5, 30067.0], [96.6, 30180.0], [96.7, 30557.0], [96.8, 30653.0], [96.9, 30691.0], [97.0, 30877.0], [97.1, 32462.0], [97.2, 33602.0], [97.3, 33978.0], [97.4, 34270.0], [97.5, 34500.0], [97.6, 34886.0], [97.7, 35272.0], [97.8, 35949.0], [97.9, 36613.0], [98.0, 37075.0], [98.1, 37395.0], [98.2, 37772.0], [98.3, 37918.0], [98.4, 38069.0], [98.5, 38350.0], [98.6, 38622.0], [98.7, 38948.0], [98.8, 39175.0], [98.9, 39486.0], [99.0, 39603.0], [99.1, 39708.0], [99.2, 39897.0], [99.3, 40018.0], [99.4, 40419.0], [99.5, 43206.0], [99.6, 45860.0], [99.7, 49474.0], [99.8, 53773.0], [99.9, 55886.0], [100.0, 78735.0]], "isOverall": false, "label": "\u83B7\u53D6\u4E00\u6761\u4F4F\u9662\u4FE1\u606F", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1571.0, "series": [{"data": [[0.0, 1571.0], [100.0, 1028.0], [33700.0, 3.0], [34500.0, 6.0], [36100.0, 5.0], [35300.0, 3.0], [36900.0, 2.0], [37700.0, 4.0], [38500.0, 2.0], [39300.0, 2.0], [40100.0, 2.0], [46500.0, 1.0], [50500.0, 1.0], [49700.0, 1.0], [200.0, 696.0], [53700.0, 2.0], [56900.0, 1.0], [300.0, 196.0], [400.0, 396.0], [500.0, 453.0], [600.0, 305.0], [700.0, 154.0], [800.0, 173.0], [900.0, 139.0], [1000.0, 99.0], [1100.0, 120.0], [1200.0, 82.0], [1300.0, 93.0], [1400.0, 35.0], [1500.0, 45.0], [1600.0, 29.0], [1700.0, 30.0], [1800.0, 59.0], [1900.0, 36.0], [2000.0, 63.0], [2100.0, 65.0], [2200.0, 149.0], [2300.0, 96.0], [2400.0, 135.0], [2500.0, 65.0], [2600.0, 59.0], [2700.0, 89.0], [2800.0, 74.0], [2900.0, 31.0], [3000.0, 29.0], [3100.0, 47.0], [3300.0, 29.0], [3200.0, 20.0], [3400.0, 49.0], [3500.0, 36.0], [3600.0, 30.0], [3700.0, 41.0], [3800.0, 27.0], [3900.0, 27.0], [4000.0, 35.0], [4100.0, 36.0], [4200.0, 43.0], [4300.0, 19.0], [4600.0, 28.0], [4500.0, 60.0], [4400.0, 48.0], [4700.0, 41.0], [4800.0, 62.0], [74500.0, 1.0], [4900.0, 60.0], [5000.0, 58.0], [5100.0, 80.0], [5200.0, 76.0], [5300.0, 45.0], [5600.0, 50.0], [5400.0, 37.0], [5500.0, 21.0], [5700.0, 57.0], [5800.0, 51.0], [6100.0, 55.0], [5900.0, 55.0], [6000.0, 24.0], [6200.0, 37.0], [6300.0, 28.0], [6600.0, 36.0], [6500.0, 40.0], [6400.0, 52.0], [6900.0, 32.0], [6700.0, 27.0], [6800.0, 35.0], [7000.0, 33.0], [7100.0, 27.0], [7200.0, 25.0], [7300.0, 18.0], [7400.0, 17.0], [7500.0, 17.0], [7600.0, 14.0], [7700.0, 11.0], [7900.0, 16.0], [7800.0, 14.0], [8000.0, 15.0], [8100.0, 10.0], [8400.0, 19.0], [8200.0, 9.0], [8600.0, 6.0], [9200.0, 12.0], [9000.0, 7.0], [8800.0, 6.0], [9600.0, 9.0], [9400.0, 7.0], [9800.0, 8.0], [10000.0, 11.0], [10200.0, 3.0], [10400.0, 7.0], [10600.0, 5.0], [10800.0, 1.0], [11200.0, 15.0], [11400.0, 21.0], [11600.0, 24.0], [11800.0, 25.0], [12000.0, 24.0], [12200.0, 18.0], [12400.0, 3.0], [12600.0, 4.0], [12800.0, 5.0], [13200.0, 3.0], [13000.0, 1.0], [13800.0, 1.0], [13400.0, 2.0], [14200.0, 3.0], [14000.0, 1.0], [14600.0, 1.0], [14800.0, 2.0], [14400.0, 2.0], [15000.0, 3.0], [15200.0, 2.0], [15400.0, 2.0], [16200.0, 3.0], [16400.0, 2.0], [16800.0, 12.0], [17200.0, 5.0], [17600.0, 3.0], [18000.0, 1.0], [18400.0, 2.0], [18800.0, 4.0], [19200.0, 1.0], [19600.0, 4.0], [20000.0, 4.0], [20400.0, 3.0], [20800.0, 4.0], [21600.0, 5.0], [22000.0, 3.0], [22400.0, 4.0], [22800.0, 2.0], [23200.0, 2.0], [24000.0, 2.0], [24400.0, 1.0], [24800.0, 4.0], [25200.0, 4.0], [25600.0, 2.0], [27600.0, 2.0], [26800.0, 1.0], [28400.0, 1.0], [28800.0, 2.0], [29200.0, 6.0], [29600.0, 4.0], [30000.0, 274.0], [30800.0, 4.0], [32400.0, 1.0], [32800.0, 2.0], [34400.0, 3.0], [33600.0, 2.0], [35200.0, 6.0], [36800.0, 2.0], [36000.0, 1.0], [37600.0, 4.0], [38400.0, 5.0], [39200.0, 3.0], [40000.0, 7.0], [40800.0, 1.0], [43200.0, 1.0], [45600.0, 1.0], [47200.0, 1.0], [52000.0, 1.0], [55200.0, 2.0], [56000.0, 2.0], [78400.0, 1.0], [33900.0, 7.0], [34700.0, 1.0], [33100.0, 1.0], [36300.0, 2.0], [37900.0, 8.0], [37100.0, 1.0], [39500.0, 8.0], [44300.0, 1.0], [46700.0, 1.0], [45100.0, 1.0], [48300.0, 1.0], [50700.0, 1.0], [51500.0, 1.0], [52300.0, 1.0], [54700.0, 1.0], [16500.0, 6.0], [17300.0, 8.0], [16900.0, 1.0], [17700.0, 1.0], [18100.0, 3.0], [18500.0, 4.0], [18900.0, 2.0], [19300.0, 3.0], [19700.0, 3.0], [20100.0, 1.0], [20900.0, 6.0], [20500.0, 5.0], [21300.0, 4.0], [21700.0, 1.0], [22100.0, 4.0], [22500.0, 2.0], [23300.0, 6.0], [23700.0, 3.0], [24100.0, 3.0], [24500.0, 4.0], [24900.0, 6.0], [25300.0, 3.0], [25700.0, 1.0], [26500.0, 3.0], [26100.0, 4.0], [26900.0, 2.0], [27300.0, 3.0], [28500.0, 1.0], [27700.0, 3.0], [28900.0, 4.0], [29300.0, 10.0], [29700.0, 4.0], [30500.0, 5.0], [30100.0, 11.0], [30900.0, 2.0], [31300.0, 1.0], [32500.0, 1.0], [32100.0, 1.0], [33800.0, 1.0], [34600.0, 2.0], [35400.0, 1.0], [37000.0, 4.0], [37800.0, 7.0], [38600.0, 6.0], [39400.0, 3.0], [40200.0, 2.0], [43400.0, 1.0], [45000.0, 1.0], [45800.0, 1.0], [49000.0, 1.0], [53000.0, 1.0], [55400.0, 2.0], [57000.0, 1.0], [78700.0, 1.0], [34100.0, 2.0], [33300.0, 2.0], [37300.0, 6.0], [38100.0, 3.0], [38900.0, 5.0], [39700.0, 9.0], [40500.0, 3.0], [47700.0, 1.0], [49300.0, 1.0], [8300.0, 12.0], [8500.0, 6.0], [8700.0, 3.0], [9100.0, 7.0], [8900.0, 4.0], [9700.0, 11.0], [9500.0, 12.0], [9300.0, 9.0], [9900.0, 8.0], [10100.0, 2.0], [10500.0, 8.0], [10700.0, 9.0], [10300.0, 5.0], [10900.0, 10.0], [11100.0, 7.0], [11500.0, 25.0], [11300.0, 17.0], [11700.0, 27.0], [11900.0, 29.0], [12100.0, 8.0], [12300.0, 3.0], [12500.0, 2.0], [12700.0, 2.0], [13100.0, 1.0], [12900.0, 2.0], [13300.0, 1.0], [13500.0, 2.0], [13700.0, 1.0], [14100.0, 2.0], [14300.0, 1.0], [14500.0, 2.0], [14700.0, 2.0], [14900.0, 4.0], [15300.0, 2.0], [15100.0, 7.0], [15700.0, 1.0], [15500.0, 2.0], [15900.0, 2.0], [16100.0, 4.0], [16300.0, 2.0], [16600.0, 5.0], [17000.0, 5.0], [17400.0, 2.0], [17800.0, 3.0], [18200.0, 3.0], [18600.0, 4.0], [19400.0, 2.0], [19000.0, 2.0], [20200.0, 7.0], [20600.0, 5.0], [21000.0, 2.0], [21400.0, 1.0], [21800.0, 2.0], [22200.0, 1.0], [22600.0, 2.0], [23400.0, 5.0], [23000.0, 1.0], [24200.0, 6.0], [23800.0, 1.0], [25400.0, 1.0], [25000.0, 3.0], [24600.0, 1.0], [25800.0, 2.0], [27400.0, 1.0], [27000.0, 1.0], [28600.0, 1.0], [27800.0, 1.0], [29000.0, 6.0], [29400.0, 5.0], [29800.0, 7.0], [30200.0, 3.0], [30600.0, 19.0], [31800.0, 1.0], [32200.0, 3.0], [34000.0, 3.0], [34800.0, 2.0], [33200.0, 1.0], [35600.0, 1.0], [37200.0, 3.0], [38000.0, 5.0], [38800.0, 1.0], [39600.0, 10.0], [40400.0, 2.0], [41200.0, 1.0], [43600.0, 1.0], [44400.0, 1.0], [65200.0, 1.0], [66300.0, 1.0], [34300.0, 5.0], [35100.0, 4.0], [35900.0, 3.0], [37500.0, 3.0], [38300.0, 7.0], [39100.0, 4.0], [39900.0, 8.0], [40700.0, 1.0], [43100.0, 1.0], [45500.0, 1.0], [47100.0, 1.0], [49500.0, 1.0], [51100.0, 1.0], [57500.0, 1.0], [17100.0, 3.0], [16700.0, 2.0], [17500.0, 3.0], [17900.0, 5.0], [18300.0, 2.0], [18700.0, 5.0], [19100.0, 6.0], [19500.0, 2.0], [19900.0, 4.0], [20300.0, 4.0], [20700.0, 3.0], [21500.0, 3.0], [21900.0, 8.0], [22300.0, 3.0], [22700.0, 2.0], [23100.0, 3.0], [23500.0, 4.0], [23900.0, 4.0], [24300.0, 2.0], [24700.0, 6.0], [25500.0, 3.0], [25100.0, 1.0], [26300.0, 1.0], [25900.0, 3.0], [27500.0, 2.0], [27100.0, 1.0], [28700.0, 2.0], [29100.0, 4.0], [29500.0, 10.0], [29900.0, 1.0], [30300.0, 1.0], [30700.0, 5.0], [32300.0, 1.0], [34200.0, 4.0], [33400.0, 2.0], [35800.0, 2.0], [36600.0, 3.0], [35000.0, 1.0], [38200.0, 1.0], [39000.0, 7.0], [39800.0, 3.0], [41400.0, 1.0], [43800.0, 1.0], [47000.0, 1.0], [49400.0, 1.0], [54200.0, 2.0], [55000.0, 1.0], [55800.0, 1.0]], "isOverall": false, "label": "\u83B7\u53D6\u4E00\u6761\u4F4F\u9662\u4FE1\u606F", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 78700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1648.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4459.0, "series": [{"data": [[0.0, 3893.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1648.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4459.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.307692307692308, "minX": 1.59429054E12, "maxY": 979.0497890295359, "series": [{"data": [[1.5942906E12, 565.6253791708796], [1.59429078E12, 4.307692307692308], [1.59429072E12, 36.242774566474], [1.59429054E12, 979.0497890295359], [1.59429066E12, 101.9076923076923]], "isOverall": false, "label": "\u7EBF\u7A0B\u7EC4", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59429078E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 49474.0, "series": [{"data": [[2.0, 691.0], [3.0, 635.6666666666666], [4.0, 1252.6666666666667], [5.0, 1549.0], [6.0, 1452.5], [7.0, 1463.0], [8.0, 1297.0], [9.0, 2166.0], [10.0, 1791.0], [11.0, 1841.6666666666667], [12.0, 1891.0], [13.0, 8748.375], [14.0, 30004.8], [15.0, 30008.8], [16.0, 30046.0], [17.0, 30004.0], [18.0, 30005.0], [19.0, 30004.5], [20.0, 30005.0], [21.0, 532.0], [22.0, 643.0], [23.0, 1014.5], [24.0, 1072.0], [25.0, 1222.0], [26.0, 1316.2], [27.0, 30025.0], [28.0, 30007.75], [29.0, 30005.666666666668], [30.0, 30005.0], [31.0, 30005.0], [33.0, 1021.0], [32.0, 1682.5], [35.0, 2506.0], [34.0, 2553.923076923077], [37.0, 3208.0], [36.0, 2543.3333333333335], [39.0, 2326.0], [38.0, 2461.0], [41.0, 30009.384615384613], [40.0, 15776.5], [43.0, 30007.25], [42.0, 1091.0], [45.0, 30025.0], [44.0, 30008.5], [47.0, 30006.0], [46.0, 30005.0], [49.0, 30007.5], [48.0, 30004.5], [51.0, 15325.5], [50.0, 30015.5], [53.0, 3817.0], [52.0, 961.5], [55.0, 30008.5], [54.0, 15456.0], [57.0, 30008.5], [56.0, 24146.4], [59.0, 30010.0], [58.0, 30013.0], [61.0, 384.0], [60.0, 30007.0], [63.0, 15215.899999999998], [62.0, 30005.5], [67.0, 20179.666666666664], [66.0, 19208.454545454548], [65.0, 30010.0], [64.0, 30012.0], [71.0, 969.6666666666666], [70.0, 15245.5], [69.0, 15069.0], [68.0, 20075.166666666668], [75.0, 30019.0], [74.0, 805.0], [73.0, 10251.0], [72.0, 30007.0], [79.0, 22833.5], [78.0, 819.0], [77.0, 15491.916666666668], [76.0, 1176.0], [83.0, 30010.0], [82.0, 873.0], [81.0, 30019.0], [80.0, 26367.624999999996], [87.0, 30006.625], [86.0, 30010.555555555555], [85.0, 30005.0], [84.0, 30017.100000000006], [91.0, 30005.0], [90.0, 30034.428571428572], [89.0, 30006.0], [88.0, 30018.0], [95.0, 30005.0], [94.0, 30005.2], [93.0, 30004.85714285714], [92.0, 30006.166666666668], [99.0, 30005.0], [98.0, 30005.0], [97.0, 30005.5], [96.0, 30005.0], [103.0, 30005.333333333332], [102.0, 30004.8], [101.0, 30005.25], [100.0, 30004.85714285714], [107.0, 20021.0], [106.0, 20051.333333333332], [105.0, 30004.666666666668], [104.0, 30004.666666666668], [111.0, 30005.0], [110.0, 18781.999999999996], [109.0, 10050.333333333332], [108.0, 20022.0], [115.0, 20026.333333333332], [114.0, 30005.0], [113.0, 25013.833333333336], [112.0, 10035.666666666668], [119.0, 15038.300000000001], [118.0, 75.5], [117.0, 30021.0], [116.0, 30089.2], [123.0, 49474.0], [122.0, 9377.22222222222], [121.0, 15025.5], [120.0, 30010.0], [127.0, 35425.0], [126.0, 29719.4], [125.0, 18682.14285714286], [124.0, 27524.5], [135.0, 30639.0], [134.0, 35007.0], [133.0, 139.5], [132.0, 30618.333333333332], [131.0, 26310.14285714286], [130.0, 5350.5], [129.0, 20856.25], [128.0, 28908.5], [143.0, 14646.5], [142.0, 30687.0], [141.0, 30713.75], [140.0, 15514.500000000002], [139.0, 15549.5], [138.0, 57.333333333333336], [137.0, 15497.250000000002], [136.0, 30754.0], [151.0, 37948.333333333336], [149.0, 41642.6], [148.0, 33737.8], [147.0, 29309.75], [146.0, 23854.0], [145.0, 22564.0], [144.0, 23624.75], [159.0, 21500.0], [158.0, 17289.666666666668], [157.0, 15684.4], [156.0, 32069.875000000004], [155.0, 23442.53846153846], [153.0, 21003.333333333332], [152.0, 21337.0], [167.0, 30188.666666666668], [166.0, 22917.2], [165.0, 74.0], [164.0, 37337.5], [163.0, 16095.5], [162.0, 1466.0], [161.0, 20605.75], [160.0, 35590.0], [175.0, 31553.428571428572], [174.0, 39731.50000000001], [173.0, 447.0], [172.0, 26029.75], [171.0, 29938.88888888889], [170.0, 26073.42857142857], [169.0, 21544.0], [168.0, 36385.666666666664], [182.0, 209.0], [181.0, 645.6666666666666], [179.0, 8102.285714285714], [178.0, 9681.0], [177.0, 34819.42857142857], [176.0, 38246.42857142857], [190.0, 801.0], [189.0, 806.0], [188.0, 850.0], [187.0, 732.25], [186.0, 4522.75], [185.0, 689.2], [184.0, 605.3333333333334], [199.0, 776.625], [198.0, 6577.238095238095], [197.0, 889.5], [196.0, 904.8333333333334], [195.0, 869.7777777777778], [193.0, 856.0], [192.0, 3820.1818181818176], [207.0, 987.0], [206.0, 950.25], [205.0, 1034.5], [204.0, 8113.766666666664], [202.0, 11753.199999999999], [201.0, 9822.333333333334], [200.0, 19300.0], [215.0, 1521.0], [214.0, 1541.6666666666667], [213.0, 7937.4], [212.0, 27914.714285714286], [211.0, 8970.0], [210.0, 849.0], [208.0, 885.0], [223.0, 1097.0], [221.0, 1382.3333333333333], [220.0, 1421.8333333333333], [219.0, 792.5], [218.0, 4001.846153846153], [216.0, 1207.4], [231.0, 1033.0], [230.0, 907.0], [229.0, 18802.666666666664], [228.0, 1919.0], [227.0, 936.8571428571429], [226.0, 7726.166666666667], [225.0, 891.0], [224.0, 897.0], [239.0, 16755.5], [238.0, 14554.75], [237.0, 2446.95652173913], [236.0, 1142.1250000000002], [235.0, 899.0], [234.0, 933.1111111111111], [233.0, 984.0], [232.0, 927.0], [247.0, 1635.1666666666665], [246.0, 5946.8], [245.0, 1674.3333333333333], [243.0, 1685.571428571429], [242.0, 5354.874999999999], [241.0, 6235.428571428572], [240.0, 8971.25], [255.0, 1348.0], [254.0, 1380.6], [253.0, 9277.5], [252.0, 11812.666666666666], [251.0, 7943.000000000001], [250.0, 1640.6249999999998], [249.0, 1427.0], [270.0, 2183.0], [271.0, 14264.25], [269.0, 15552.5], [268.0, 2152.0], [267.0, 6669.666666666666], [266.0, 2230.5], [265.0, 8207.25], [264.0, 2315.8], [263.0, 7660.7142857142835], [257.0, 3314.59090909091], [256.0, 4531.666666666666], [259.0, 2011.5], [258.0, 2009.1666666666667], [262.0, 14868.0], [261.0, 18126.4], [260.0, 6564.4], [285.0, 3182.4285714285716], [284.0, 2521.0], [275.0, 3270.1666666666665], [274.0, 5087.722222222223], [273.0, 2119.0], [272.0, 2099.5], [283.0, 4592.909090909091], [282.0, 7628.666666666667], [281.0, 7911.434782608696], [280.0, 2224.6666666666665], [279.0, 2241.5], [278.0, 2285.5], [277.0, 2304.6666666666665], [276.0, 2280.75], [302.0, 6369.666666666667], [303.0, 8069.166666666667], [301.0, 4065.0], [300.0, 4027.5], [299.0, 4037.5], [298.0, 4056.5], [296.0, 11346.583333333334], [295.0, 4228.222222222223], [289.0, 4342.0], [288.0, 3392.25], [291.0, 2750.5], [290.0, 8658.5], [294.0, 5882.343749999999], [293.0, 4289.793103448276], [292.0, 2773.0], [318.0, 6859.444444444444], [319.0, 4724.0], [317.0, 6299.923076923077], [316.0, 5771.650000000001], [315.0, 5246.25], [313.0, 5065.0], [312.0, 9044.2], [311.0, 4947.714285714286], [305.0, 8360.333333333334], [304.0, 7289.6], [307.0, 6478.5], [306.0, 8606.416666666666], [310.0, 4779.5], [309.0, 5192.0], [308.0, 5480.900000000001], [334.0, 5333.0], [335.0, 6953.4], [333.0, 4301.5], [332.0, 5117.5], [331.0, 5181.166666666667], [330.0, 4282.0], [329.0, 6397.833333333333], [328.0, 4938.75], [327.0, 4507.5], [321.0, 4599.0], [320.0, 4630.0], [323.0, 6360.444444444443], [322.0, 7015.347826086957], [326.0, 4925.6], [325.0, 4537.733333333334], [324.0, 4455.0], [350.0, 2419.75], [351.0, 20.666666666666668], [349.0, 20.0], [348.0, 4836.75], [347.0, 3314.7500000000005], [346.0, 801.1666666666667], [345.0, 1748.0], [344.0, 21.0], [343.0, 11.0], [337.0, 8115.363636363636], [336.0, 5366.25], [339.0, 5060.0], [338.0, 5076.0], [342.0, 1408.3500000000001], [341.0, 7242.833333333333], [340.0, 13151.6], [366.0, 71.0], [367.0, 62.66666666666667], [365.0, 3083.9], [364.0, 72.57142857142858], [363.0, 68.44444444444444], [362.0, 542.8], [361.0, 1314.1666666666667], [359.0, 2502.5], [353.0, 5780.666666666667], [352.0, 1984.3125], [355.0, 28.5], [354.0, 10241.5], [358.0, 24.0], [357.0, 34.0], [356.0, 32.0], [382.0, 82.66666666666667], [383.0, 78.0], [381.0, 63.699999999999996], [380.0, 68.5], [379.0, 77.0], [378.0, 1816.6666666666665], [377.0, 10106.090909090914], [376.0, 1127.3], [375.0, 89.6190476190476], [369.0, 50.5], [368.0, 60.0], [371.0, 1924.625], [370.0, 5060.0], [374.0, 3806.9], [373.0, 49.0], [372.0, 36.0], [398.0, 83.2], [399.0, 76.0], [397.0, 18190.875], [396.0, 23754.181818181816], [395.0, 140.42857142857142], [394.0, 150.0], [393.0, 131.75], [392.0, 117.0], [391.0, 141.85714285714283], [385.0, 43.333333333333336], [384.0, 57.32258064516129], [387.0, 10037.687499999998], [386.0, 45.0], [390.0, 3541.3333333333335], [389.0, 85.62499999999999], [388.0, 74.29411764705883], [414.0, 2392.777777777778], [415.0, 56.96153846153845], [413.0, 65.0], [412.0, 69.57142857142857], [411.0, 87.5], [410.0, 14987.727272727274], [409.0, 10773.653846153846], [408.0, 77.5], [407.0, 79.5], [401.0, 85.0], [400.0, 75.0], [403.0, 104.0], [402.0, 83.0], [406.0, 10686.25], [405.0, 101.0], [404.0, 102.5], [430.0, 5447.666666666666], [431.0, 4231.75], [429.0, 5476.0], [428.0, 4989.727272727274], [427.0, 15500.831460674159], [426.0, 684.2500000000001], [425.0, 803.2058823529413], [424.0, 654.576923076923], [423.0, 4706.510204081633], [417.0, 44.57575757575758], [416.0, 38.00000000000001], [419.0, 4291.914893617022], [418.0, 67.33333333333333], [422.0, 67.42857142857143], [421.0, 64.80555555555557], [420.0, 51.5], [446.0, 1115.3333333333333], [447.0, 1516.5384615384614], [445.0, 45.0], [444.0, 15.333333333333332], [443.0, 30.0], [442.0, 10234.870689655167], [441.0, 628.3636363636364], [440.0, 84.5], [439.0, 69.3076923076923], [433.0, 1459.0], [432.0, 27.0], [435.0, 82.0], [434.0, 52.6], [438.0, 38.666666666666664], [437.0, 327.95238095238096], [436.0, 6638.75], [462.0, 51.625], [463.0, 329.9090909090909], [461.0, 52.714285714285715], [460.0, 42.0], [459.0, 39.666666666666664], [458.0, 42.0], [457.0, 39.25], [456.0, 26858.999999999996], [455.0, 18857.0], [449.0, 26.142857142857146], [448.0, 29.0], [451.0, 60.0], [450.0, 40.666666666666664], [454.0, 45.5], [453.0, 61.0], [452.0, 65.0], [476.0, 6159.25], [478.0, 20905.5], [479.0, 5674.0], [477.0, 9801.214285714286], [473.0, 9964.875], [472.0, 11153.0], [470.0, 5188.833333333333], [468.0, 16277.333333333332], [467.0, 17029.947368421053], [466.0, 20573.0], [465.0, 11689.349999999999], [464.0, 372.2894736842105], [494.0, 31.0], [495.0, 1500.875], [493.0, 11889.8], [492.0, 3003.5], [491.0, 16104.333333333334], [490.0, 36.0], [489.0, 9706.888888888887], [488.0, 35.75000000000001], [487.0, 759.8125], [481.0, 5560.625000000001], [480.0, 5430.666666666667], [483.0, 5571.666666666667], [482.0, 5402.5], [486.0, 27.0], [485.0, 16.333333333333332], [484.0, 12970.9], [510.0, 22.0], [511.0, 18.5], [509.0, 16.0], [508.0, 6240.000000000001], [507.0, 5601.499999999999], [506.0, 14090.5], [505.0, 7542.5], [504.0, 6358.75], [503.0, 7231.5], [497.0, 8018.666666666667], [496.0, 27.0], [499.0, 18363.760000000002], [498.0, 4938.6], [502.0, 19526.499999999996], [501.0, 3430.0], [500.0, 12730.0], [540.0, 40.6], [543.0, 44.5], [529.0, 42.0], [528.0, 45.0], [531.0, 50.0], [530.0, 41.285714285714285], [533.0, 45.5], [532.0, 41.0], [542.0, 45.5], [541.0, 42.5], [539.0, 48.75], [538.0, 18.0], [537.0, 32.2], [536.0, 34.0], [527.0, 48.0], [513.0, 31.5], [512.0, 28.75], [515.0, 4836.4], [514.0, 1537.25], [517.0, 21.0], [516.0, 2283.0], [519.0, 98.0], [518.0, 40.75], [526.0, 1609.3636363636365], [525.0, 4392.6], [524.0, 29.5], [523.0, 27.333333333333332], [522.0, 29.333333333333332], [521.0, 34.0], [520.0, 5338.666666666666], [535.0, 1956.3333333333333], [534.0, 42.666666666666664], [572.0, 48.0], [575.0, 40.833333333333336], [561.0, 35.0], [560.0, 31.0], [563.0, 61.0], [562.0, 60.0], [565.0, 30.0], [564.0, 45.25], [574.0, 48.0], [573.0, 45.888888888888886], [571.0, 53.0], [570.0, 38.5], [569.0, 28.0], [568.0, 38.5], [559.0, 31.2], [545.0, 40.0], [544.0, 38.333333333333336], [547.0, 42.0], [546.0, 43.5], [549.0, 41.27272727272727], [548.0, 44.0], [551.0, 49.5], [550.0, 51.714285714285715], [558.0, 3550.0370370370365], [557.0, 4507.5], [556.0, 47.0], [555.0, 375.11111111111114], [554.0, 70.28571428571428], [553.0, 56.0], [552.0, 47.4], [567.0, 27.0], [566.0, 29.0], [604.0, 4527.571428571428], [607.0, 224.85714285714286], [593.0, 84.0], [592.0, 1937.6666666666667], [595.0, 1946.8181818181818], [594.0, 889.7142857142858], [597.0, 264.6], [596.0, 929.0588235294116], [606.0, 218.0], [605.0, 245.16666666666666], [603.0, 237.0], [602.0, 235.0], [601.0, 240.2], [600.0, 219.66666666666669], [591.0, 4049.714285714286], [577.0, 49.666666666666664], [576.0, 49.2], [579.0, 54.0], [578.0, 1112.1818181818182], [581.0, 75.0], [580.0, 1886.0], [583.0, 94.0], [582.0, 98.66666666666667], [590.0, 1131.0000000000005], [589.0, 79.66666666666667], [588.0, 93.33333333333333], [587.0, 80.33333333333333], [586.0, 84.5], [585.0, 90.0], [584.0, 88.0], [599.0, 3679.4285714285716], [598.0, 254.5], [636.0, 138.0], [639.0, 148.0], [625.0, 120.25], [624.0, 123.0], [627.0, 125.07142857142858], [626.0, 122.0], [629.0, 134.57142857142858], [628.0, 120.0], [638.0, 139.25], [637.0, 143.0], [635.0, 138.88888888888889], [634.0, 1708.9166666666665], [633.0, 2790.6500000000005], [632.0, 119.5], [623.0, 121.33333333333333], [609.0, 247.75], [608.0, 227.0], [611.0, 147.0], [610.0, 6641.875], [613.0, 151.57142857142856], [612.0, 5072.75], [615.0, 142.75], [614.0, 150.0], [622.0, 132.75], [621.0, 138.66666666666669], [620.0, 144.0], [619.0, 146.0], [618.0, 147.0], [617.0, 130.25], [616.0, 135.4], [631.0, 144.35714285714286], [630.0, 154.9], [668.0, 189.0], [671.0, 1061.5], [657.0, 213.4], [656.0, 221.4], [659.0, 194.5], [658.0, 213.24999999999997], [661.0, 174.5], [660.0, 180.0], [670.0, 257.5], [669.0, 243.74999999999997], [667.0, 1338.25], [666.0, 185.88888888888889], [665.0, 183.71428571428572], [664.0, 192.85714285714283], [655.0, 221.0], [641.0, 139.66666666666666], [640.0, 142.66666666666666], [643.0, 140.0], [642.0, 138.0], [645.0, 142.5], [644.0, 143.8], [647.0, 138.44444444444446], [646.0, 143.0], [654.0, 153.85714285714286], [653.0, 156.0], [652.0, 142.5], [651.0, 134.0], [650.0, 138.0], [649.0, 141.5], [648.0, 142.0], [663.0, 199.0], [662.0, 172.0], [700.0, 164.0], [703.0, 10075.166666666668], [689.0, 191.39999999999998], [688.0, 220.0], [691.0, 198.79999999999998], [690.0, 186.21212121212125], [693.0, 175.0], [692.0, 1931.4], [702.0, 12076.800000000001], [701.0, 217.85714285714286], [699.0, 147.28571428571428], [698.0, 175.0], [697.0, 3807.3829787234035], [696.0, 159.0], [687.0, 210.33333333333334], [673.0, 266.53333333333336], [672.0, 2479.5], [675.0, 221.33333333333334], [674.0, 225.83333333333334], [677.0, 241.8], [676.0, 245.74999999999997], [679.0, 245.0], [678.0, 236.0], [686.0, 211.0], [685.0, 216.35714285714286], [684.0, 218.0], [683.0, 227.0], [682.0, 236.66666666666666], [681.0, 234.0], [680.0, 239.0], [695.0, 161.0], [694.0, 171.0], [732.0, 655.0], [735.0, 657.7272727272727], [721.0, 10286.666666666668], [720.0, 552.5], [723.0, 23028.11111111111], [722.0, 12920.6], [725.0, 621.9285714285714], [724.0, 525.0], [734.0, 656.0], [733.0, 661.3333333333334], [731.0, 664.0], [730.0, 640.3333333333334], [729.0, 598.0], [728.0, 636.769230769231], [719.0, 556.1666666666666], [705.0, 253.0], [704.0, 6312.0], [707.0, 302.0], [706.0, 214.375], [709.0, 457.25], [708.0, 169.5], [711.0, 481.3636363636364], [710.0, 607.9545454545454], [718.0, 561.0], [717.0, 6682.714285714286], [716.0, 10125.166666666666], [715.0, 476.0], [714.0, 484.0], [713.0, 5730.454545454545], [712.0, 467.4285714285714], [727.0, 6780.749999999999], [726.0, 568.1428571428571], [764.0, 242.375], [767.0, 250.66666666666666], [753.0, 426.0], [752.0, 429.5], [755.0, 401.0], [754.0, 2441.0714285714275], [757.0, 4609.333333333333], [756.0, 3658.2333333333336], [766.0, 235.75], [765.0, 389.1428571428571], [763.0, 2009.0], [762.0, 3742.0], [761.0, 2836.727272727273], [760.0, 248.2], [751.0, 424.44444444444446], [737.0, 10251.333333333334], [736.0, 11981.6], [739.0, 14909.416666666668], [738.0, 12967.764705882353], [741.0, 487.0], [740.0, 2055.1176470588234], [743.0, 2644.5384615384623], [742.0, 480.5], [750.0, 420.0], [749.0, 3797.909090909091], [748.0, 2142.8], [747.0, 482.5], [746.0, 479.6666666666667], [745.0, 486.3333333333333], [744.0, 489.0], [759.0, 259.0], [758.0, 258.25], [796.0, 641.4], [799.0, 565.0], [785.0, 549.0], [784.0, 2132.2222222222217], [787.0, 556.25], [786.0, 559.0], [789.0, 569.6666666666666], [788.0, 574.8571428571429], [798.0, 578.75], [797.0, 595.6], [795.0, 689.3333333333334], [794.0, 690.0], [793.0, 581.2], [792.0, 552.0], [783.0, 590.6428571428571], [769.0, 389.25], [768.0, 394.0], [771.0, 4755.0], [770.0, 1045.8], [773.0, 354.6666666666667], [772.0, 1967.3846153846155], [775.0, 508.0], [774.0, 484.0], [782.0, 588.0], [781.0, 492.5833333333333], [780.0, 973.5], [779.0, 465.3333333333333], [778.0, 459.0], [777.0, 471.09999999999997], [776.0, 522.1818181818182], [791.0, 565.3333333333334], [790.0, 566.8333333333334], [828.0, 4272.2], [831.0, 549.0], [817.0, 626.1428571428571], [816.0, 640.0], [819.0, 712.0], [818.0, 710.3333333333334], [821.0, 677.5], [820.0, 681.625], [830.0, 2078.3333333333335], [829.0, 1649.6666666666665], [827.0, 3340.4444444444443], [826.0, 1135.0], [825.0, 2774.206896551724], [824.0, 4139.578947368421], [815.0, 1010.6666666666666], [801.0, 591.0], [800.0, 563.25], [803.0, 628.3333333333334], [802.0, 714.0], [805.0, 1818.6956521739128], [804.0, 629.9444444444445], [807.0, 5931.48], [806.0, 660.6875], [814.0, 1699.0], [813.0, 680.75], [812.0, 676.6666666666666], [811.0, 1345.777777777778], [810.0, 633.6666666666666], [809.0, 546.3333333333333], [808.0, 544.3], [823.0, 5004.896551724139], [822.0, 4718.2], [857.0, 3619.3636363636365], [862.0, 190.66666666666666], [863.0, 192.0], [849.0, 582.0], [848.0, 561.0], [851.0, 513.1999999999998], [850.0, 534.0], [853.0, 525.125], [852.0, 513.8571428571428], [861.0, 3464.9523809523807], [860.0, 5715.5], [859.0, 4993.5], [856.0, 497.61904761904765], [839.0, 472.6666666666667], [838.0, 471.0], [837.0, 486.0], [836.0, 487.0], [835.0, 490.0], [834.0, 8925.307692307691], [833.0, 3478.275862068965], [832.0, 1213.7142857142858], [847.0, 576.7999999999998], [846.0, 582.1428571428572], [845.0, 593.0], [844.0, 1732.3478260869565], [843.0, 465.3333333333333], [842.0, 470.0999999999999], [841.0, 452.0], [840.0, 2669.1111111111113], [855.0, 1532.25], [854.0, 2727.363636363636], [892.0, 3455.318181818182], [895.0, 921.1111111111111], [881.0, 3507.142857142858], [880.0, 529.3333333333334], [883.0, 646.5], [882.0, 2181.4666666666667], [885.0, 723.0], [884.0, 2156.5], [894.0, 5644.714285714286], [893.0, 4250.448275862069], [891.0, 2495.388888888889], [890.0, 682.4], [889.0, 693.1], [888.0, 4025.4999999999995], [879.0, 529.0769230769231], [865.0, 190.0], [864.0, 188.5], [867.0, 196.81818181818184], [866.0, 188.0], [869.0, 210.5], [868.0, 178.53846153846152], [871.0, 163.52941176470588], [870.0, 402.9444444444444], [878.0, 446.99999999999994], [877.0, 476.0], [876.0, 278.33333333333326], [875.0, 194.46153846153845], [874.0, 223.0], [873.0, 217.8181818181818], [872.0, 152.66666666666663], [887.0, 7461.0], [886.0, 707.4285714285714], [924.0, 4517.827586206896], [927.0, 2808.2], [913.0, 8228.0], [912.0, 914.1666666666667], [915.0, 7374.608695652175], [914.0, 2995.132075471698], [917.0, 547.0], [916.0, 999.2], [926.0, 2985.375], [925.0, 4642.461538461539], [923.0, 10258.0], [922.0, 5031.493150684931], [921.0, 3414.75471698113], [920.0, 533.3333333333334], [911.0, 4328.333333333332], [896.0, 1223.75], [898.0, 873.0], [897.0, 876.0], [901.0, 2504.714285714286], [900.0, 1694.4999999999998], [903.0, 3498.1111111111113], [902.0, 2441.5], [910.0, 2613.2352941176473], [909.0, 1693.4285714285713], [908.0, 800.925925925926], [907.0, 2044.36], [906.0, 3448.090909090909], [905.0, 2945.757575757576], [904.0, 4389.75], [919.0, 608.8461538461539], [918.0, 10283.800000000001], [956.0, 145.0], [959.0, 155.0], [945.0, 1465.8461538461538], [944.0, 213.625], [947.0, 156.5], [946.0, 157.33333333333334], [949.0, 162.75], [948.0, 163.0], [958.0, 160.0], [957.0, 160.0], [955.0, 148.0], [954.0, 154.0], [953.0, 162.33333333333334], [952.0, 1006.4500000000003], [943.0, 993.7391304347827], [929.0, 7760.0], [931.0, 2779.0], [930.0, 5000.222222222223], [933.0, 7065.057471264366], [932.0, 6763.6], [935.0, 8355.666666666662], [934.0, 9394.965517241379], [942.0, 1380.0], [941.0, 3989.777777777778], [940.0, 4962.363636363638], [939.0, 2268.2962962962965], [938.0, 754.0], [937.0, 763.1538461538462], [936.0, 3720.2580645161283], [951.0, 161.875], [950.0, 161.0], [988.0, 2232.0], [991.0, 8437.624999999998], [977.0, 2504.729729729729], [976.0, 917.2727272727275], [979.0, 2471.467741935484], [978.0, 323.2], [981.0, 654.7297297297298], [980.0, 253.16666666666666], [990.0, 6444.5161290322585], [989.0, 3952.9696969696975], [987.0, 4435.090909090909], [986.0, 2316.3504273504273], [985.0, 1810.6312056737586], [984.0, 1851.881656804733], [975.0, 347.0], [961.0, 2537.5555555555557], [960.0, 154.0], [963.0, 155.8], [962.0, 154.0], [965.0, 176.71428571428572], [964.0, 3772.166666666666], [967.0, 235.72727272727272], [966.0, 2870.2272727272725], [974.0, 1674.5897435897439], [973.0, 306.5], [972.0, 1932.5], [971.0, 2778.4375], [970.0, 212.0], [969.0, 1267.888888888889], [968.0, 227.0], [983.0, 213.86363636363637], [982.0, 1162.4080000000001], [1000.0, 5372.759289176092], [999.0, 2135.9393939393935], [998.0, 5279.7835820895525], [997.0, 4891.0675675675675], [996.0, 436.6666666666667], [995.0, 437.0], [994.0, 6034.333333333334], [993.0, 6399.132183908047], [1.0, 677.0]], "isOverall": false, "label": "\u83B7\u53D6\u4E00\u6761\u4F4F\u9662\u4FE1\u606F", "isController": false}, {"data": [[687.6387000000004, 5107.4358999999995]], "isOverall": false, "label": "\u83B7\u53D6\u4E00\u6761\u4F4F\u9662\u4FE1\u606F-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 156.86666666666667, "minX": 1.59429054E12, "maxY": 71603.6, "series": [{"data": [[1.5942906E12, 23427.133333333335], [1.59429078E12, 2355.6], [1.59429072E12, 8386.116666666667], [1.59429054E12, 11551.65], [1.59429066E12, 2367.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5942906E12, 71603.6], [1.59429078E12, 156.86666666666667], [1.59429072E12, 2087.5333333333333], [1.59429054E12, 42897.0], [1.59429066E12, 3921.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59429078E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1095.9230769230767, "minX": 1.59429054E12, "maxY": 22587.923076923104, "series": [{"data": [[1.5942906E12, 4326.410852713183], [1.59429078E12, 1095.9230769230767], [1.59429072E12, 16918.52601156068], [1.59429054E12, 4252.942334739819], [1.59429066E12, 22587.923076923104]], "isOverall": false, "label": "\u83B7\u53D6\u4E00\u6761\u4F4F\u9662\u4FE1\u606F", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59429078E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1095.7692307692307, "minX": 1.59429054E12, "maxY": 22587.873846153845, "series": [{"data": [[1.5942906E12, 4326.368891135838], [1.59429078E12, 1095.7692307692307], [1.59429072E12, 16918.473988439317], [1.59429054E12, 4252.7696202531715], [1.59429066E12, 22587.873846153845]], "isOverall": false, "label": "\u83B7\u53D6\u4E00\u6761\u4F4F\u9662\u4FE1\u606F", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59429078E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.59429054E12, "maxY": 5.759774964838253, "series": [{"data": [[1.5942906E12, 1.244523087293561], [1.59429078E12, 0.0], [1.59429072E12, 0.09826589595375723], [1.59429054E12, 5.759774964838253], [1.59429066E12, 0.14153846153846164]], "isOverall": false, "label": "\u83B7\u53D6\u4E00\u6761\u4F4F\u9662\u4FE1\u606F", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59429078E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.59429054E12, "maxY": 78735.0, "series": [{"data": [[1.5942906E12, 78735.0], [1.59429078E12, 1586.0], [1.59429072E12, 30156.0], [1.59429054E12, 24758.0], [1.59429066E12, 57566.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5942906E12, 13.0], [1.59429078E12, 618.0], [1.59429072E12, 184.78999730348585], [1.59429054E12, 48.0], [1.59429066E12, 42.93399992227555]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5942906E12, 14.0], [1.59429078E12, 618.0], [1.59429072E12, 194.96900107860563], [1.59429054E12, 49.204400339126586], [1.59429066E12, 43.227400031089786]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5942906E12, 13.0], [1.59429078E12, 618.0], [1.59429072E12, 190.44499865174294], [1.59429054E12, 48.78199957609176], [1.59429066E12, 43.09699996113777]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.5942906E12, 5.0], [1.59429078E12, 618.0], [1.59429072E12, 148.0], [1.59429054E12, 18.0], [1.59429066E12, 42.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5942906E12, 566.0], [1.59429078E12, 1251.0], [1.59429072E12, 30004.0], [1.59429054E12, 2456.0], [1.59429066E12, 30005.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59429078E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 44.0, "minX": 1.0, "maxY": 35052.5, "series": [{"data": [[2.0, 28363.5], [616.0, 69.0], [687.0, 257.0], [691.0, 191.0], [3.0, 12826.0], [4.0, 30005.5], [5.0, 1226.0], [7.0, 311.0], [8.0, 10037.5], [9.0, 1086.0], [10.0, 30004.5], [11.0, 30005.0], [12.0, 30005.0], [13.0, 30009.0], [14.0, 30011.5], [15.0, 27345.0], [17.0, 30005.0], [19.0, 4317.0], [22.0, 30005.0], [24.0, 21403.0], [26.0, 6377.5], [27.0, 30007.0], [29.0, 4926.0], [32.0, 10355.5], [37.0, 5720.0], [36.0, 30005.0], [39.0, 6158.0], [38.0, 6179.5], [40.0, 24675.5], [41.0, 30005.0], [44.0, 24781.0], [46.0, 739.5], [49.0, 30005.0], [56.0, 2788.5], [61.0, 4398.0], [60.0, 2275.0], [69.0, 5035.0], [71.0, 3814.0], [68.0, 1615.5], [75.0, 2005.0], [76.0, 2297.5], [83.0, 5229.0], [80.0, 811.0], [86.0, 6539.0], [93.0, 44.0], [98.0, 7968.0], [99.0, 873.0], [100.0, 1205.0], [137.0, 2305.0], [144.0, 6333.0], [164.0, 2419.0], [174.0, 3040.0], [215.0, 6953.0], [1.0, 35052.5], [277.0, 11485.0], [275.0, 2281.5], [289.0, 2814.0], [323.0, 383.0], [334.0, 583.0], [322.0, 45.0], [343.0, 100.0], [341.0, 69.0], [384.0, 557.0], [392.0, 598.0], [418.0, 1072.0], [444.0, 60.0], [459.0, 489.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 691.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 44.0, "minX": 1.0, "maxY": 35052.5, "series": [{"data": [[2.0, 28363.5], [616.0, 69.0], [687.0, 257.0], [691.0, 191.0], [3.0, 12826.0], [4.0, 30005.5], [5.0, 1226.0], [7.0, 311.0], [8.0, 10037.5], [9.0, 1086.0], [10.0, 30004.5], [11.0, 30005.0], [12.0, 30005.0], [13.0, 30009.0], [14.0, 30011.5], [15.0, 27345.0], [17.0, 30005.0], [19.0, 4316.5], [22.0, 30005.0], [24.0, 21403.0], [26.0, 6377.5], [27.0, 30007.0], [29.0, 4926.0], [32.0, 10355.5], [37.0, 5720.0], [36.0, 30005.0], [39.0, 6158.0], [38.0, 6179.5], [40.0, 24675.5], [41.0, 30005.0], [44.0, 24781.0], [46.0, 739.5], [49.0, 30005.0], [56.0, 2788.5], [61.0, 4397.0], [60.0, 2275.0], [69.0, 5035.0], [71.0, 3814.0], [68.0, 1615.5], [75.0, 2005.0], [76.0, 2297.0], [83.0, 5229.0], [80.0, 811.0], [86.0, 6539.0], [93.0, 44.0], [98.0, 7968.0], [99.0, 873.0], [100.0, 1205.0], [137.0, 2305.0], [144.0, 6333.0], [164.0, 2417.5], [174.0, 3040.0], [215.0, 6953.0], [1.0, 35052.5], [277.0, 11484.0], [275.0, 2281.5], [289.0, 2814.0], [323.0, 383.0], [334.0, 583.0], [322.0, 45.0], [343.0, 100.0], [341.0, 69.0], [384.0, 557.0], [392.0, 598.0], [418.0, 1072.0], [444.0, 60.0], [459.0, 489.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 691.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.59429054E12, "maxY": 86.01666666666667, "series": [{"data": [[1.5942906E12, 86.01666666666667], [1.59429078E12, 0.08333333333333333], [1.59429072E12, 1.9833333333333334], [1.59429054E12, 74.51666666666667], [1.59429066E12, 4.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59429078E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.59429054E12, "maxY": 98.9, "series": [{"data": [[1.5942906E12, 98.9], [1.59429078E12, 0.21666666666666667], [1.59429072E12, 2.8833333333333333], [1.59429054E12, 59.25], [1.59429066E12, 5.416666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59429078E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.59429054E12, "maxY": 98.9, "series": [{"data": [[1.5942906E12, 98.9], [1.59429078E12, 0.21666666666666667], [1.59429072E12, 2.8833333333333333], [1.59429054E12, 59.25], [1.59429066E12, 5.416666666666667]], "isOverall": false, "label": "\u83B7\u53D6\u4E00\u6761\u4F4F\u9662\u4FE1\u606F-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59429078E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.59429054E12, "maxY": 98.9, "series": [{"data": [[1.5942906E12, 98.9], [1.59429078E12, 0.21666666666666667], [1.59429072E12, 2.8833333333333333], [1.59429054E12, 59.25], [1.59429066E12, 5.416666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59429078E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

